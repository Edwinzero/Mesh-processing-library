rel ?= 1#  0=debug or 1=release (usually 1)
x64 = 1#           0 or 1
use_vs_libs ?= 0#  0 or 1       (usually 0; else use libraries generated from Visual Studio using msbuild)

# Warning: Using CONFIG=clangcl has many issues; most importantly, C++ exceptions are currently unsupported.)

# Test:
#  make -C ./test/native CONFIG=clangcl test_hello

# STATUS:
# First I got version 3.4 from http://llvm.org/releases/download.html#3.4
#  clang bin distribution does not come with a C++ runtime library.
#  I tried including mingw bin directories in PATH, but it does not help in finding them.
#  I then tried using clang-cl.exe (equivalent to msbuild-bin/cl.exe) which uses VS libraries.
#  However, clang compiler declares an error in a windows include file:
#   C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\INCLUDE\type_traits(620,32) :  error: '_Ty' does not refer to a value
#                 : _Cat_base<_IS_CONSTRUCTIBLE(_Ty, _Args...)>
#  This is apparently a known compatiblity bug with VS2013 (VC12):
#    http://llvm.org/bugs/show_bug.cgi?id=17926
#  I should wait for the next bin distribution release (version 3.5?) which includes the fix.
#
# Next I got version SVN r203967 (~3.5) from http://llvm.org/builds/ Windows snapshot builds
#  http://llvm.org/builds/downloads/LLVM-3.5.r203967-win32.exe
# see http://clang.llvm.org/docs/MSVCCompatibility.html
#
# Issues:
#  - no exception handling -> no StackWalker, no include <thread>
#    AND MOST IMPORTANTLY, cannot use my Video, Image, and other classes which use exceptions!
#  - __PRETTY_FUNCTION__ and __FUNCTION__ are unhelpful for type_name()?
#  - tMultigrid fails on both x86 and x64
#  - tVectorF causes internal compiler error
#  - SSE4.1 not supported?
#  - OpenMP not supported? (also true in CONFIG=clang)
#  - regex linker error
#  - tImage new test case to highlight Grid<> issue
#    also causes failure of:
#   ~/src/bin/clangcl/Filterimage -create 20 20 -info -cropsides 0 10 0 10 -stat
#   ~/src/bin/clangcl/Filterimage data/gcanyon_sq129_b44.elev.png -tobw -info -cropsides 0 64 0 64
#     as used in ./demos/all_demos_create_results.bat
#
# Then I switched to using clang with mingw32 (CONFIG=clang) and many issues were resolved!

# see http://clang.llvm.org/docs/MSVCCompatibility.html
#  promising for clang 3.7 and clang 3.8

msvc = 2015
include $(dir $(lastword $(MAKEFILE_LIST)))/Makefile_base_vc

extobj = obj
extlib = lib
CRUMBS ?= *.ilk *.pdb *.asm
LDOUTPUT ?= -Fe$@

$(call prepend_PATH,c:/Program Files (x86)/LLVM/msbuild-bin)
CXX = cl
CC = cl

# Alternative:
# $(call prepend_PATH,c:/Program Files (x86)/LLVM/bin)
# CXX = clang-cl

# export LIB := c:\Program Files (x86)\LLVM\lib\clang\3.5\lib\windows;$(LIB)
export LIB := c:\Program Files (x86)\LLVM\lib\clang\3.7\lib\windows;$(LIB)

# clang has some experimental support for extensions from Microsoft Visual C++; to enable it, use the -fms-extensions command-line option.
# clang has a -fms-compatibility flag that makes clang accept enough invalid C++ to be able to parse most Microsoft headers
# clang allows setting _MSC_VER with -fmsc-version=. It defaults to 1700 which is the same as Visual C/C++ 2012.

# ccommon += -openmp -EHsc  # not recognized
# ccommon += -fms-compatibility  # clang-cl.exe: error: unknown argument: '-fms-compatibility'
ccommon += -fmsc-version=$(mscversion)
# ccommon += -Qunused-arguments  # for  including: -Gm- -Zc:rvalueCast -fp:fast -FC -Gy -arch:SSE2 -FdtMap.pdb
# ignored-attributes because WINAPI defined as __stdcall is incorrect for x64
ccommon += $(if $(x64:0=),-m64 -Wno-ignored-attributes,-m32)

ccommon += -GR-#  disable RTTI  (used to have -D_HAS_EXCEPTIONS=0)
ccommon += -EHsc#  enable synchronous exception handling (this flag seems to be ignored!)
# From https://groups.google.com/forum/#!topic/llvm-dev/WPn8uSpgCis ; this causes internal compiler error
# ccommon += -Xclang -fexceptions -Xclang -fcxx-exceptions # -Xclang -fnew-ms-eh

# ccommon += -msse4.1  # clang option is not supported in cl-clang
# ccommon += -arch:avx2  # does not help enable SSE4.1 instruction set

ifeq ($(plain_compiler),)
  disable_warnings_in_headers = -wd4820 -wd4986 -wd4514 -wd4710 -wd4668 -wd4917 -wd4350
  disable_my_warnings = -wd4127 -wd4512 -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE
  disable_other_warnings = -wd4625 -wd4626 -wd4365 -wd4061 -wd4640 -wd4191 -wd4711 -wd4557
  cxxthoroughwarnings = -Wall $(disable_warnings_in_headers) $(disable_my_warnings) $(disable_other_warnings)
  cxxnotneeded = -Zc:wchar_t -Zc.forScope -Gd -errorReport:queue
  cwarnings = -W4 $(cxxthoroughwarnings)
  ccommon += $(if $(ignore_compile_warnings:0=),,-WX)
  ccommon += -nologo -Oi $(cwarnings)
  notrecognized = -Gm- -Zc:rvalueCast -fp:fast -FC
  #   -Zc:strictStrings: "Note that when you are using this option in debug mode, the STL will not compile."
  # cxxall += -showIncludes  # show all included header files
  commonrel += -O2 -MT  -D "NDEBUG" -GF $(if $(wholeopt:0=),-GL,)
  notrecognized = -GS- -Gy $(if $(x64:0=),,-arch:SSE2)
  commondbg += -Od -MTd  -D "_DEBUG" -Zi -RTCcsu
  notrecognized = -GS
  # cxxdbg used to have "-D _ITERATOR_DEBUG_LEVEL=1" to avoid horribly slow unordered_map, but incompatible with VT
  # -D "_UNICODE" -D "UNICODE"
  # -GL : whole program optimization (use with /LTCG linker option if %:%.obj)
  cxx_list_assembly_code =  # -FAs not recognized
  # Avoid shared vc$(msvcmajor)0.pdb; required for parallel make if >1 exe in same directory.
  cxxexe += -Fd$(@:%=%.pdb)
  cxxrel += $(commonrel)
  cxxdbg += $(commondbg)
endif  # plain_compiler

cxxall += $(ccommon)
c-all += $(ccommon)
crel += $(commonrel)
cdbg += $(commondbg)

# cxxall += -EP  # Copies preprocessor output to standard output.

# Define rules for *.obj
# %.o : %.cpp
#	$(COMPILE.cpp) $(OUTPUT_OPTION) $<
# echo "$$PATH"; cl
%.obj : %.cpp
#	@echo $(CXX) $<
#	$(if $(plain_compiler:0=)$(DEBUG_MAKE),,@)$(COMPILE.cpp) -Fo$@ $<
# Use absolute pathnames for source files, to get these in warnings and errors.  doesn't help for include files.
	$(warning CONFIG=clangcl has many issues)$(if $(plain_compiler:0=)$(DEBUG_MAKE),,@)$(COMPILE.cpp) -Fo$@ $(foreach f,$<,$(call drive_abspath,$(f)))

# %.o : %.c
#	$(COMPILE.c) $(OUTPUT_OPTION) $<
%.obj : %.c
#	@echo $(CXX) $<
#	$(if $(plain_compiler:0=)$(DEBUG_MAKE),,@)$(COMPILE.c) -Fo$@ $<
# Use absolute pathnames for source files, to get these in warnings and errors.  doesn't help for include files.
	$(if $(plain_compiler:0=)$(DEBUG_MAKE),,@)$(COMPILE.c) -Fo$@ $(foreach f,$<,$(call drive_abspath,$(f)))

# Cancel the built-in rules
% : %.o
%.o : %.cpp
%.o : %.c

# Avoid filenames beginning with '/', replace by 'c:/'
# % : %.o
#	$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@
% : %.obj
	$(CC) $(cxxexe) $(TARGET_ARCH) $(call add_drive,$^ $(LDLIBS)) $(LDOUTPUT) $(LDFLAGS)

%.cso : %.cs
	fxc -nologo -T cs_5_0 -E $(subst -,_,$(notdir $(basename $<))) -Fo$@ $<

# Remove $(cxxexe) if direct without obj.
% : %.cpp
	$(if $(plain_compiler:0=)$(DEBUG_MAKE),,@)$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) \
	  $(call add_drive,$(foreach f,$<,$(abspath $(f))) $(LDLIBS)) $(LDOUTPUT) $(LDFLAGS)

ltcg = $(if $(wholeopt:0=),$(if $(rel:0=),/ltcg,),)
LDFLAGS += -link -nologo $(if $(rel:0=),-incremental:no -opt:ref -opt:icf,-debug) -dynamicbase:no $(ltcg) -libpath:$(HhRoot)/libNumeric/mkl_libs

LDFLAGS += user32.lib gdi32.lib
